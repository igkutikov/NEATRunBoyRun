import typing
import os
import sys
import colorama
import random
import numpy
from RunBoyRun.model import interfaces


class Map(interfaces.IMap):
    def __init__(self, map: bytes, nRows: int):
        self.__map: numpy.ndarray = numpy.reshape(numpy.frombuffer(map, dtype=numpy.int8), (nRows, len(map) // nRows)).transpose().astype(numpy.int32)
        interfaces.IMap.__init__(self, self.__map.shape[0], self.__map.shape[1])


    def slice(self, rng: typing.Tuple[int, int]) -> numpy.ndarray:
        if rng[0] < 0:
            rng = (self.__map.shape[0] - (rng[0] + 1), rng[1])
        if rng[1] < 0:
            rng = (rng[0], self.__map.shape[0] - (rng[1] + 1))
        if rng[1] >= self.__map.shape[0]:
            rng = (rng[0], self.__map.shape[0])
        if rng[0] > rng[1]:
            rng = (rng[1], rng[0])
        if rng[0] >= self.__map.shape[0] or rng[1] < rng[0]:
            return numpy.zeros((self.nRows, rng[1] - rng[0]), dtype=numpy.int32)
        
        return self.__map[rng[0]:rng[1], :]
    

    def is_coord_valid(self, x: int, y: int) -> bool:
        return 0 <= x < self.__map.shape[0] and 0 <= y < self.__map.shape[1]


    def get_cell(self, x: int, y: int) -> typing.Optional[int]:
        if not self.is_coord_valid(x, y):
            return None
        return self.__map[x, y]


    def print_map(self, rng: typing.Tuple[int, int], pos: typing.Optional[typing.Tuple[int, int]] = None) -> None:
        prefix: str = '||'
        postfix: str = '||'
        screen_width: int = os.get_terminal_size().columns - 4

        if rng[0] < 0:
            rng = (self.__map.shape[0] - (rng[0] + 1), rng[1])
        if rng[1] < 0:
            rng = (rng[0], self.__map.shape[0] - (rng[1] + 1))
        if rng[1] >= self.__map.shape[0]:
            rng = (rng[0], self.__map.shape[0])
        if rng[0] >= self.__map.shape[0] or rng[1] < rng[0]:
            return
        if rng[0] > rng[1]:
            return
        
        if rng[0] > 0:
            screen_width -= 3
            prefix = '...||'

        if rng[1] - rng[0] > screen_width:
            screen_width -= 3
            postfix = '||...'
            rng = (rng[0], rng[0] + screen_width)
        elif rng[1] < self.__map.shape[0] - 1:
            screen_width -= 3
            postfix = '||...'
        else:
            screen_width = rng[1] - rng[0]

        if rng[1] - rng[0] < 1 or screen_width < 1:
            return
        
        if pos is not None:
            if pos[0] < 0 or pos[1] < 0 or pos[1] >= self._nRows:
                pos = None
            elif rng[0] > pos[0] or rng[1] < pos[0]:
                pos = None
            else:
                pos = (pos[0] - rng[0], pos[1])
        
            

        screen_width = ((rng[1] - rng[0]) + len(prefix) + len(postfix)) - len(str(rng[0])) - len(str(rng[1]))
        ascii_map: numpy.ndarray = self.__map[rng[0]:rng[1], :].transpose().astype(numpy.int8).view('S1')
        sys.stdout.write(str(rng[0]) + (' ' * screen_width) + str(rng[1]) + '\n')
        for idx, row in enumerate(ascii_map):
            if pos is not None and idx == pos[1]:
                row = ''.join(colorama.Back.RED + chr(int.from_bytes(char, byteorder='little', signed=False)) + colorama.Style.RESET_ALL if chidx == pos[0] else chr(int.from_bytes(char, byteorder='little', signed=False)) for chidx, char in enumerate(row))
            else:
                row = bytes(row).decode('ascii')
            sys.stdout.write(prefix)
            sys.stdout.write(row)
            sys.stdout.write(postfix)
            sys.stdout.write('\n')


    def clone(self) -> interfaces.IMap:
        data: bytes = bytes(self.__map.transpose().astype(numpy.int8).view('S1').flatten())
        return Map(data, self.__map.shape[1])


    def append(self, col: typing.Collection) -> None:
        if (len(col) != self.__map.shape[1]):
            raise ValueError(f'col size must be same as the maps {self._nRows}')
        
        self.__map = numpy.append(self.__map, [col], axis=0)
        self._nCols = self.__map.shape[0]

    
    def extend(self, cols: typing.Collection[typing.Collection]) -> None:
        for col in cols:
            if (len(col) != self.__map.shape[1]):
                raise ValueError(f'all cols sizes must be same as the maps {self.__map.shape[1]}')
        
        self.__map = numpy.append(self.__map, cols, axis=0)
        self._nCols = self.__map.shape[0]

    
MapName = typing.Literal['static', 'random']

class MapFactory:
    @staticmethod
    def __GenerateStaticMap() -> Map:
        map: bytearray = bytearray(b
                                   b
                                   b
                                   b
                                   b
                                   b
                                   b
                                   b
                                   b
        
        return Map(map, 9)
    

    @staticmethod
    def __GenerateStaticWithObstaclesMap() -> Map:
        map: bytearray = bytearray(b
                                   b
                                   b
                                   b
                                   b
                                   b
                                   b
                                   b'=  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  =  *  = '  + \
                                   b
        
        return Map(map, 9)


    @staticmethod
    def __GenerateRandomMap() -> Map:
        MAPS = {
            "chunk1": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        ["=", "=", " ", "=", " ", " ", " ", " ", " "],
                        [" ", " ", "=", " ", " ", " ", "*", " ", " "],
                        [" ", " ", " ", "*", " ", "=", " ", " ", "="],
                        [" ", " ", " ", " ", " ", " ", "=", "=", " "],
                        [" ", " ", " ", "*", " ", "=", " ", " ", "="],
                        [" ", " ", "=", " ", " ", " ", "*", " ", " "],
                        ["=", "=", " ", "=", " ", " ", " ", " ", " "],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ],
                    ("chunk1", "chunk2","chunk4", "chunk5", "chunk6","chunk7", "chunk9", "chunk10", "chunk11", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk20", "chunk21","chunk22", "chunk23", "chunk24", "chunk25","chunk26", "chunk27", "chunk28",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34","chunk35", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),
                        True),
            "chunk2": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        [" ", "=", " ", " ", " ", " ", " ", " ", "="],
                        ["=", " ", " ", " ", " ", " ", " ", "=", " "],
                        [" ", " ", " ", " ", "*", "=", "=", " ", " "],
                        [" ", " ", "*", "=", "=", " ", "*", "=", "="],
                        [" ", " ", " ", " ", "*", "=", "=", " ", " "],
                        ["=", " ", " ", " ", " ", " ", " ", "=", " "],
                        [" ", "=", " ", " ", " ", " ", " ", " ", "="],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ],
                    ("chunk1", "chunk2", "chunk3", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10",
                        "chunk11", "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19",
                        "chunk20", "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28",
                        "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk35", "chunk36", "chunk37", "chunk38",
                        "chunk39", "chunk40"),
                        False),
            "chunk3": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        [" ", " ", " ", " ", " ", " ", "=", " ", "="],
                        [" ", "=", " ", " ", " ", " ", " ", "=", " "],
                        [" ", "*", " ", "*", "=", "=", " ", " ", " "],
                        ["=", " ", "=", "=", " ", "*", "*", " ", " "],
                        [" ", "*", " ", "*", "=", "=", " ", " ", " "],
                        [" ", "=", " ", " ", " ", " ", " ", "=", " "],
                        [" ", " ", " ", " ", " ", " ", "=", " ", "="],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk12", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24", "chunk25",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37", "chunk38", "chunk40"), False),
            "chunk4": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        ["=", " ", " ", " ", " ", "=", " ", "=", " "],
                        [" ", " ", " ", "=", "=", " ", "=", " ", "*"],
                        [" ", " ", "=", " ", " ", "*", " ", " ", " "],
                        [" ", " ", " ", "*", " ", " ", " ", " ", " "],
                        [" ", " ", "=", " ", " ", "*", " ", " ", " "],
                        [" ", " ", " ", "=", "=", " ", "=", " ", "*"],
                        ["=", " ", " ", " ", " ", "=", " ", "=", " "],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], ("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                        "chunk20", "chunk24", "chunk26", "chunk28", "chunk31", "chunk35"), True),
            "chunk5": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        [" ", " ", "=", " ", "=", " ", " ", " ", "*"],
                        [" ", " ", " ", "=", " ", "*", " ", " ", " "],
                        ["=", " ", " ", " ", " ", " ", "=", " ", " "],
                        [" ", " ", " ", " ", " ", "=", " ", " ", " "],
                        ["=", " ", " ", " ", " ", " ", "=", " ", " "],
                        [" ", " ", " ", "=", " ", "*", " ", " ", " "],
                        [" ", " ", "=", " ", "=", " ", " ", " ", "*"],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], ("chunk1", "chunk2", "chunk6", "chunk10", "chunk14", "chunk16", "chunk17", "chunk19", "chunk21",
                        "chunk23", "chunk29", "chunk30", "chunk33", "chunk38", "chunk40"), False),
            "chunk6": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                        ["=", " ", "=", " ", " ", " ", " ", " ", " "],
                        [" ", "=", " ", " ", " ", " ", "=", " ", " "],
                        [" ", " ", "*", " ", "=", "=", " ", "*", " "],
                        [" ", "=", " ", " ", " ", " ", "=", " ", " "],
                        ["=", " ", "=", " ", " ", " ", " ", " ", " "],
                        [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], (
                    "chunk4", "chunk5", "chunk7", "chunk8", "chunk9", "chunk11", "chunk12", "chunk13", "chunk15", "chunk18",
                    "chunk20", "chunk22", "chunk23", "chunk24", "chunk25", "chunk27", "chunk28", "chunk31", "chunk37"), False),
            "chunk7": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        ["=", " ", " ", " ", " ", " ", " ", " ", "="],
                        [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                        ["=", " ", "=", " ", "=", " ", " ", " ", "*"],
                        [" ", " ", " ", " ", " ", "=", " ", " ", " "],
                        ["=", " ", "=", " ", "=", " ", " ", " ", "*"],
                        [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                        ["=", " ", " ", " ", " ", " ", " ", " ", "="],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ],
                    ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38", "chunk40"),
                    True),
            "chunk8": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        ["=", " ", " ", " ", " ", " ", " ", " ", " "],
                        [" ", " ", " ", " ", "=", " ", " ", " ", "*"],
                        [" ", " ", "=", "=", " ", " ", " ", "=", " "],
                        [" ", " ", " ", " ", "*", " ", "=", " ", " "],
                        [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                        [" ", " ", " ", " ", " ", " ", " ", " ", "*"],
                        [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], ("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                        "chunk20", "chunk24", "chunk26", "chunk28", "chunk31", "chunk35"), False),
            "chunk9": ([
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                        [" ", " ", "=", " ", " ", " ", "=", " ", "="],
                        [" ", "=", " ", " ", " ", " ", " ", "=", " "],
                        ["=", " ", " ", " ", " ", " ", " ", " ", "*"],
                        [" ", " ", " ", " ", " ", "*", " ", " ", " "],
                        ["=", " ", " ", " ", " ", " ", " ", " ", "*"],
                        [" ", "=", " ", " ", " ", " ", " ", "=", " "],
                        [" ", " ", "=", " ", " ", " ", "=", " ", "="],
                        ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                    ], ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38","chunk40"),
                    False),
            "chunk10": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", "=", " ", " ", " ", " ", " ", "=", "="],
                            ["=", " ", " ", " ", " ", " ", " ", " ", "*"],
                            [" ", "*", " ", "=", " ", " ", " ", " ", " "],
                            [" ", " ", "=", " ", " ", " ", " ", " ", " "],
                            [" ", "*", " ", "=", " ", " ", " ", " ", " "],
                            ["=", " ", " ", " ", " ", " ", " ", " ", "*"],
                            [" ", "=", " ", " ", " ", " ", " ", "=", "="],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],
                        ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38", "chunk40"),
                        False),
            "chunk11": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", "=", " ", "=", "=", " "],
                            [" ", " ", " ", "=", " ", "=", " ", "*", "="],
                            [" ", " ", "=", " ", "*", " ", "*", " ", " "],
                            [" ", "=", " ", "=", " ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", "*", " ", "*", " ", " "],
                            [" ", " ", " ", "=", " ", "=", " ", "*", "="],
                            ["=", " ", " ", " ", "=", " ", "=", "=", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],
                        ("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), True),
            "chunk12": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                            [" ", " ", " ", " ", "=", " ", "=", " ", "="],
                            ["=", " ", " ", " ", " ", " ", " ", "*", " "],
                            [" ", "=", "=", " ", " ", " ", "*", " ", " "],
                            ["=", " ", " ", " ", " ", " ", " ", "*", " "],
                            [" ", " ", " ", " ", "=", " ", "=", " ", "="],
                            [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), False),
            "chunk13": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", "=", " ", "=", " ", "="],
                            [" ", "*", " ", "=", " ", "=", " ", "=", " "],
                            ["=", " ", "=", " ", "*", " ", " ", " ", "*"],
                            [" ", "=", " ", " ", " ", " ", " ", "=", " "],
                            ["=", " ", "=", " ", "*", " ", " ", " ", "*"],
                            [" ", "*", " ", "=", " ", "=", " ", "=", " "],
                            ["=", " ", " ", " ", "=", " ", "=", " ", "="],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ], ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38","chunk40"),
                        False),
            "chunk14": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", "=", " ", " ", " ", " ", " ", " ", " "],
                            ["=", " ", "=", " ", "*", " ", " ", "*", " "],
                            [" ", "*", " ", "=", " ", "*", "=", " ", "*"],
                            ["=", " ", "=", " ", "=", "=", " ", "=", "="],
                            [" ", "*", " ", "=", " ", "*", "=", " ", "*"],
                            ["=", " ", "=", " ", "*", " ", " ", "*", " "],
                            [" ", "=", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ], ("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                            "chunk20", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk31", "chunk32",
                            "chunk34", "chunk35", "chunk36", "chunk37", "chunk39"), False),
            "chunk15": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", "=", " ", " ", " ", " ", " ", "*"],
                            [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                            [" ", "=", "=", " ", "=", " ", "=", " ", "="],
                            ["=", " ", "*", "=", " ", "*", " ", " ", " "],
                            [" ", "=", "=", " ", "=", " ", "=", " ", "="],
                            [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                            ["=", " ", "=", " ", " ", " ", " ", " ", "*"],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],  ("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"), True),
            "chunk16": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", " ", " ", " ", "=", " "],
                            ["=", "=", " ", " ", " ", " ", " ", "*", "="],
                            [" ", " ", " ", " ", "*", "=", " ", " ", " "],
                            [" ", "*", " ", "=", "=", "=", " ", " ", " "],
                            [" ", " ", " ", " ", "*", "=", " ", " ", " "],
                            ["=", "=", " ", " ", " ", " ", " ", "*", "="],
                            ["=", " ", " ", " ", " ", " ", " ", "=", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), True),
            "chunk17": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " ", " ", " ", " ", " "],
                            ["=", " ", "=", " ", " ", " ", " ", " ", "="],
                            [" ", "=", " ", "=", " ", " ", " ", "*", " "],
                            [" ", " ", " ", " ", " ", " ", " ", " ", "="],
                            [" ", " ", " ", " ", " ", "=", " ", "=", " "],
                            ["=", " ", " ", " ", " ", " ", "=", " ", " "],
                            [" ", " ", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                            "chunk20", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk31", "chunk32",
                            "chunk34", "chunk35", "chunk36", "chunk37", "chunk39"), False),
            "chunk18": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", " ", "=", " ", "=", " ", " ", " ", " "],
                            [" ", " ", " ", "=", " ", " ", " ", "=", " "],
                            ["=", " ", "*", " ", " ", " ", " ", " ", "="],
                            [" ", " ", " ", " ", "=", " ", "*", " ", " "],
                            ["=", " ", "*", " ", " ", " ", " ", " ", "="],
                            [" ", " ", " ", "=", " ", " ", " ", "=", " "],
                            [" ", " ", "=", " ", "=", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],  ("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),False),
            "chunk19": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", "=", " ", "=", " ", " ", " ", " ", " "],
                            ["=", " ", "=", " ", " ", " ", "*", " ", "="],
                            [" ", "*", " ", "*", " ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", " ", " ", "=", " ", " "],
                            [" ", "*", " ", "*", " ", "=", " ", " ", " "],
                            ["=", " ", "=", " ", " ", " ", "*", " ", "="],
                            [" ", "=", " ", "=", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), False),
            "chunk20": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", " ", " ", " ", " ", " "],
                            [" ", "=", " ", "=", " ", " ", " ", "=", " "],
                            [" ", " ", "=", " ", " ", " ", "=", " ", "="],
                            [" ", "=", " ", "*", " ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", " ", " ", " ", " ", "="],
                            [" ", "=", " ", "=", " ", " ", " ", " ", " "],
                            ["=", " ", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],  ("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"), True),
            "chunk21": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", "=", " ", " ", " ", " ", " "],
                            ["=", " ", "=", " ", "*", " ", "=", " ", "="],
                            [" ", "=", " ", "=", " ", "=", " ", "=", " "],
                            ["=", " ", " ", " ", "=", " ", "*", " ", "*"],
                            [" ", " ", " ", " ", " ", " ", " ", "=", " "],
                            ["=", " ", "*", " ", " ", " ", " ", " ", "="],
                            [" ", "=", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), False),
            "chunk22": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", " ", " ", "=", " ", " "],
                            ["*", " ", " ", "=", " ", " ", " ", "*", " "],
                            [" ", " ", "=", " ", "=", " ", " ", " ", "="],
                            [" ", " ", " ", " ", " ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", " ", " ", "=", " ", "="],
                            ["*", " ", " ", " ", " ", " ", " ", "=", " "],
                            ["=", " ", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],  ("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"), True),
            "chunk23": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", "=", "=", "=", " ", "=", " ", " ", " "],
                            ["=", "*", "*", "*", "=", "*", "*", " ", "="],
                            ["=", " ", " ", " ", " ", " ", "*", "=", " "],
                            ["=", "*", "=", "*", " ", " ", " ", " ", "="],
                            ["=", " ", " ", " ", " ", " ", "*", "=", " "],
                            ["=", "*", "*", "*", "=", "*", "*", " ", "="],
                            ["=", "=", "=", "=", " ", "=", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ],
                        ("chunk1", "chunk2", "chunk3", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29",
                        "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk35", "chunk36", "chunk37", "chunk38", "chunk40"), True),
            "chunk24": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", "=", "=", " ", " ", " ", "=", " "],
                            [" ", "=", " ", "*", "=", " ", "=", " ", "*"],
                            [" ", " ", "=", " ", "*", "=", " ", " ", " "],
                            [" ", " ", " ", "=", " ", " ", "*", " ", "="],
                            [" ", " ", "=", " ", "*", "=", " ", " ", " "],
                            [" ", "=", " ", "*", "=", " ", "=", " ", "*"],
                            ["=", " ", "=", "=", " ", " ", " ", "=", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ], ("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                            "chunk20", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk31", "chunk32",
                            "chunk34", "chunk35", "chunk36", "chunk37", "chunk39"),  True),
            "chunk25": ([
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", "=", " ", " ", " ", " "],
                            [" ", "*", " ", "=", " ", " ", "=", " ", " "],
                            [" ", " ", "=", " ", "*", " ", " ", " ", "="],
                            ["=", "=", " ", " ", " ", "=", " ", "=", " "],
                            [" ", " ", " ", " ", " ", " ", "*", " ", "="],
                            [" ", "*", " ", " ", " ", "=", " ", " ", " "],
                            ["=", " ", " ", " ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#", "#", "#", "#"]
                        ], ("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14","chunk15",
                            "chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),False),
            "chunk26": ([
                            ["#", "#", "#", "#", "#"],
                            ["=", " ", "=", "=", " "],
                            [" ", "=", " ", " ", "="],
                            [" ", " ", "*", " ", " "],
                            ["=", "=", " ", " ", " "],
                            [" ", " ", "*", " ", " "],
                            [" ", "=", " ", " ", "="],
                            ["=", " ", "=", "=", " "],
                            ["#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), True),
            "chunk27": ([
                            ["#", "#", "#", "#", "#"],
                            [" ", " ", " ", "=", "="],
                            [" ", " ", "=", " ", " "],
                            [" ", "=", " ", " ", " "],
                            ["=", " ", " ", " ", "="],
                            [" ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", " "],
                            [" ", " ", " ", "=", "="],
                            ["#", "#", "#", "#", "#"]
                        ], ("chunk1", "chunk2", "chunk3", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10",
                        "chunk11", "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19",
                        "chunk20", "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28",
                        "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk35", "chunk36", "chunk37", "chunk38",
                        "chunk39", "chunk40"), False),
            "chunk28": ([
                            ["#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", "="],
                            [" ", "=", " ", " ", " "],
                            [" ", " ", "=", " ", "="],
                            [" ", " ", " ", "*", " "],
                            [" ", " ", "=", " ", "="],
                            [" ", "=", " ", " ", " "],
                            ["=", " ", " ", " ", "="],
                            ["#", "#", "#", "#", "#"]
                        ], ("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk12", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38","chunk40"), True),
            "chunk29":([
                            ["#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " "],
                            ["=", " ", " ", " ", "="],
                            [" ", " ", " ", " ", " "],
                            [" ", " ", " ", " ", " "],
                            [" ", " ", " ", " ", " "],
                            ["=", " ", " ", " ", "="],
                            [" ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), False),
            "chunk30": ([
                            ["#", "#", "#", "#", "#"],
                            ["=", "=", " ", "=", " "],
                            [" ", " ", "=", " ", "*"],
                            [" ", " ", " ", "=", " "],
                            [" ", " ", " ", " ", "="],
                            [" ", " ", " ", "=", " "],
                            [" ", " ", "=", " ", "*"],
                            ["=", "=", " ", "=", " "],
                            ["#", "#", "#", "#", "#"]
                        ], ("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                            "chunk20", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk31", "chunk32",
                            "chunk34", "chunk35", "chunk36", "chunk37", "chunk39"), True),
            "chunk31": ([
                            ["#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", "="],
                            [" ", " ", " ", "=", " "],
                            ["=", " ", " ", " ", "*"],
                            [" ", " ", " ", " ", " "],
                            ["=", " ", " ", " ", "*"],
                            [" ", " ", " ", "=", " "],
                            [" ", " ", " ", " ", "="],
                            ["#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38","chunk40"), False),
            "chunk32": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", "=", " ", " "],
                            [" ", " ", "=", " ", " ", " "],
                            [" ", " ", " ", "*", " ", "="],
                            ["=", " ", " ", " ", "=", " "],
                            [" ", " ", " ", "*", " ", "="],
                            [" ", " ", "=", " ", " ", " "],
                            [" ", " ", " ", "=", " ", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14",
                        "chunk15","chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),False),
            "chunk33": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " ", "="],
                            ["=", "=", " ", " ", "=", " "],
                            [" ", " ", "*", " ", "*", "*"],
                            [" ", " ", "=", "=", " ", " "],
                            [" ", " ", "*", " ", "*", "*"],
                            ["=", "=", " ", " ", "=", " "],
                            [" ", " ", " ", " ", " ", "="],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk6", "chunk7", "chunk8", "chunk10", "chunk11", "chunk14",
                        "chunk15", "chunk16", "chunk17", "chunk19", "chunk20", "chunk21", "chunk22", "chunk23", "chunk24",
                        "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk33", "chunk35", "chunk36", "chunk37",
                        "chunk38","chunk40"), False),
            "chunk34": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " ", " "],
                            [" ", " ", "=", " ", " ", " "],
                            [" ", "*", " ", "*", " ", "="],
                            ["=", " ", "=", " ", "=", " "],
                            [" ", "=", " ", "=", " ", "="],
                            [" ", " ", " ", " ", "*", " "],
                            [" ", " ", " ", " ", " ", "="],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14",
                        "chunk15","chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"), False),
            "chunk35": ([
                            ["#", "#", "#", "#", "#", "#"],
                            ["=", " ", "=", " ", "=", " "],
                            [" ", "=", " ", "=", " ", "="],
                            [" ", " ", "*", " ", "*", " "],
                            [" ", " ", " ", "=", " ", "="],
                            [" ", " ", "*", " ", "*", " "],
                            [" ", "=", " ", "=", " ", "="],
                            ["=", " ", "=", " ", "=", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"), True),
            "chunk36": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", "=", " ", " "],
                            [" ", " ", "=", " ", "=", " "],
                            [" ", "=", " ", "=", " ", "*"],
                            ["=", " ", "=", " ", "=", "="],
                            [" ", "=", " ", "=", " ", "*"],
                            [" ", " ", "=", " ", "=", " "],
                            [" ", " ", " ", "=", " ", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk3", "chunk5", "chunk7", "chunk9", "chunk12", "chunk13", "chunk15", "chunk16", "chunk18",
                            "chunk20", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk31", "chunk32",
                            "chunk34", "chunk35", "chunk36", "chunk37", "chunk39"),  False),
            "chunk37": ([
                            ["#", "#", "#", "#", "#", "#"],
                            ["=", " ", " ", " ", "=", " "],
                            [" ", " ", " ", "=", " ", "="],
                            [" ", "=", "=", " ", "*", " "],
                            ["=", " ", " ", "=", " ", " "],
                            [" ", "=", "=", " ", "*", " "],
                            [" ", " ", " ", "=", " ", "="],
                            ["=", " ", " ", " ", "=", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10", "chunk11",
                        "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19", "chunk20",
                        "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28", "chunk29", "chunk30", "chunk31",
                        "chunk33", "chunk35", "chunk37", "chunk38", "chunk40"),  True),
            "chunk38": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", " ", " ", " "],
                            ["=", " ", "=", " ", " ", " "],
                            [" ", "=", " ", " ", " ", "="],
                            [" ", " ", "*", " ", "=", " "],
                            [" ", "=", " ", " ", " ", "="],
                            ["=", " ", "=", " ", " ", " "],
                            [" ", " ", " ", " ", " ", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14",
                        "chunk15","chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),
                        False),
            "chunk39": ([
                            ["#", "#", "#", "#", "#", "#"],
                            [" ", " ", " ", "=", "=", " "],
                            [" ", " ", "=", " ", " ", "*"],
                            [" ", " ", " ", "=", " ", "="],
                            ["=", " ", " ", " ", "*", " "],
                            [" ", " ", " ", "=", " ", "="],
                            [" ", " ", "=", " ", " ", "*"],
                            [" ", " ", " ", "=", "=", " "],
                            ["#", "#", "#", "#", "#", "#"]
                        ],("chunk1", "chunk2", "chunk5", "chunk6", "chunk7", "chunk9", "chunk10", "chunk12", "chunk13", "chunk14",
                        "chunk15","chunk16", "chunk17", "chunk18", "chunk19", "chunk21", "chunk24", "chunk25", "chunk26", "chunk27",
                            "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk36", "chunk37", "chunk38", "chunk39", "chunk40"),
                        False),
            "chunk40": ([
                            ["#", "#", "#", "#", "#", "#", "#"],
                            [" ", "=", " ", " ", " ", "=", "="],
                            ["=", " ", " ", " ", "=", " ", " "],
                            [" ", " ", " ", "=", " ", "=", " "],
                            [" ", " ", " ", " ", "*", " ", "="],
                            [" ", " ", " ", "=", " ", "=", " "],
                            ["=", " ", " ", " ", "=", " ", " "],
                            [" ", "=", " ", " ", " ", "=", "="],
                            ["#", "#", "#", "#", "#", "#", "#"]
                        ],
                        ("chunk1", "chunk2", "chunk3", "chunk4", "chunk5", "chunk6", "chunk7", "chunk8", "chunk9", "chunk10",
                        "chunk11", "chunk12", "chunk13", "chunk14", "chunk15", "chunk16", "chunk17", "chunk18", "chunk19",
                        "chunk20", "chunk21", "chunk22", "chunk23", "chunk24", "chunk25", "chunk26", "chunk27", "chunk28",
                        "chunk29", "chunk30", "chunk31", "chunk32", "chunk33", "chunk34", "chunk35", "chunk36", "chunk37", "chunk38",
                        "chunk39", "chunk40"),
                        False),
        }

        starting_key: str = random.choice([chunk for chunk in MAPS if MAPS[chunk][2]])
        map: numpy.ndarray = numpy.array(MAPS[starting_key][0], dtype='|S1', copy=True)
        map = map.view(numpy.int8)
        
        while map.shape[1] < 500:
            chunk_key: str = random.choice(MAPS[starting_key][1])
            map = numpy.concatenate((map, numpy.array(MAPS[chunk_key][0], dtype='|S1', copy=True).view(numpy.int8)), axis=1)
        
        if map.shape[1] > 500:
            map = map[:, :500]
        
        return Map(bytes(map.flatten()), 9)

    __GENERATROES: typing.Dict[MapName, typing.Callable[[], Map]] = {
        'static': __GenerateStaticMap,
        'static_with_obstacles': __GenerateStaticWithObstaclesMap,
        'random': __GenerateRandomMap
    }


    @staticmethod
    def create_map(board: MapName) -> interfaces.IMap:
        return MapFactory.__GENERATROES[board]()
        


if __name__ == "__main__":
    map: interfaces.IMap = MapFactory.create_map('random')
    map.print_map((0,9), (0,3))
    map.print_map((9,18), (9,3))
    map.print_map((18,27), (18,3))
    map.print_map((27,36), (27,3))